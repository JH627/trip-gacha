<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.gacha.model.dao.BoardDao">
  <insert id="insert" parameterType="map">
          INSERT INTO boards (
              uploader_id,
              title,
              content,
              created_at,
              category
          ) VALUES (
              #{userId},
              #{boardDto.title},
              #{boardDto.content},
              NOW(),
              #{boardDto.category}
          )
  </insert>

    <resultMap id="BoardHeaderResultMap" type="com.gacha.model.dto.board.BoardHeader">
        <id property="boardId" column="board_id"/>
        <result property="title" column="title"/>
        <result property="authorName" column="author_name"/>
        <result property="createdAt" column="created_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="commentCount" column="comment_count"/>
    </resultMap>
  <select id="selectByCondition"
          parameterType="com.gacha.model.dto.board.SearchBoardCondition"
          resultMap="BoardHeaderResultMap">
      SELECT 
          b.board_id as board_id,
          b.title as title,
          u.nickname AS author_name,
          b.created_at as created_at,
          b.view_count as view_count,
          COUNT(DISTINCT bl.board_like_id) AS like_count,
          COUNT(DISTINCT c.comment_id) AS comment_count
      FROM boards b
      LEFT JOIN users u ON b.uploader_id = u.user_id
      LEFT JOIN board_likes bl ON b.board_id = bl.board_id
      LEFT JOIN comments c ON b.board_id = c.board_id AND c.is_deleted = false
      WHERE b.is_deleted = false

      <if test="title != null and title != ''">
          AND b.title LIKE CONCAT('%', #{title}, '%')
      </if>

      <if test="category != null and category.value != 'popular'">
          AND b.category = #{category.value}
      </if>

      GROUP BY b.board_id, b.title, u.nickname, b.created_at, b.view_count

      ORDER BY
      <choose>
          <when test="orderBy.value == 'title'">title</when>
          <when test="orderBy.value == 'view_count'">view_count</when>
          <when test="orderBy.value == 'like_count'">like_count</when>
          <when test="orderBy.value == 'comment_count'">comment_count</when>
          <otherwise>created_at</otherwise>
      </choose>
      <if test="isDesc">DESC</if>
      <if test="!isDesc">ASC</if>

      LIMIT #{offset} OFFSET #{page}
  </select>

    <resultMap id="BoardDetailResultMap" type="com.gacha.model.dto.board.BoardDetail">
        <result property="category" column="category"/>
        <result property="title" column="title"/>
        <result property="authorName" column="author_name"/>
        <result property="createdAt" column="created_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="content" column="content"/>
        <result property="liked" column="liked"/>
        <result property="isReported" column="is_reported"/>
    </resultMap>
  <select id="selectById" resultMap="BoardDetailResultMap" parameterType="map">
    SELECT b.category as category, 
            b.title as title, 
            u.nickname as author_name, 
            b.created_at as created_at, 
            b.view_count as view_count,
            COUNT(DISTINCT bl.board_like_id) AS like_count,
            b.content as content, 
            MAX(CASE WHEN bl.user_id = #{userId} THEN 1 ELSE 0 END) AS liked,
            MAX(CASE WHEN br.user_id = #{userId} THEN 1 ELSE 0 END) AS is_reported
    FROM boards as b
    LEFT JOIN users as u ON b.uploader_id = u.user_id
    LEFT JOIN board_likes bl ON b.board_id = bl.board_id
    LEFT JOIN board_reports br ON b.board_id = br.board_id
    WHERE b.board_id=#{boardId}
    GROUP BY b.board_id, b.category, b.title, u.nickname, b.created_at, b.content, b.view_count
  </select>
    <update id="updateViewCount" parameterType="int">
        UPDATE boards
        SET view_count = view_count + 1
        WHERE board_id = #{boardId}
    </update>
        <update id="updateById" parameterType="map">
        UPDATE boards
        <set>
            updated_at = now(),
            <if test="boardDto.title != null">
            title = #{boardDto.title},
            </if>
            <if test="boardDto.content != null">
            content = #{boardDto.content},
            </if>
        </set>
        WHERE board_id = #{boardDto.boardId} AND uploader_id=#{userId}
    </update>
    <update id="deleteById" parameterType="map">
        UPDATE boards
        SET is_deleted=true, deleted_at=now()
        WHERE uploader_id=#{userId} AND board_id = #{boardId}
    </update>
    <insert id="report" parameterType="map">
        INSERT INTO board_reports(user_id, board_id)
        VALUES (#{userId}, #{boardId})
    </insert>
        <insert id="dislike" parameterType="map">
        INSERT INTO board_dislikes(user_id, board_id)
        VALUES (#{userId}, #{boardId})
    </insert>
    <delete id="deleteDislike">
        DELETE FROM board_dislikes
        WHERE user_id = #{userId} AND board_id = #{boardId}
    </delete>
    <insert id="like" parameterType="map">
        INSERT INTO board_likes(user_id, board_id)
        VALUES (#{userId}, #{boardId})
    </insert>
    <delete id="deleteLike">
        DELETE FROM board_likes
        WHERE user_id = #{userId} AND board_id = #{boardId}
    </delete>

    <resultMap id="CommentetailResultMap" type="com.gacha.model.dto.board.CommentDetail">
        <id property="commentId" column="comment_id">
        <result property="authorName" column="author_name"/>
        <result property="createdAt" column="created_at"/>
        <result property="content" column="content"/>
        <result property="isMine" column="is_mine"/>
    </resultMap>
    <select id="selectCommentsById" parameterType="map" resultMap="CommentetailResultMap">
        SELECT comment_id, 
                u.nickname as author_name, 
                c.created_at as created_at, 
                content,
                MAX(CASE WHEN c.uploder_id = #{userId} THEN 1 ELSE 0 END) AS is_mine,
        FROM comments as c
        LEFT JOIN users as u ON c.uploader_id=u.user_id
        WHERE c.board_id=#{getCommentsRequest.boardId}
    </select>
</mapper>